---
# Ensure necessary packages (curl, unzip) are installed on Debian-based systems.
- name: Ensure necessary packages are installed
  ansible.builtin.apt:
    name:
      - unzip  # Needed to extract Terraform zip file.
      - curl   # Needed to download Terraform from the web.
    state: present  # Ensure the packages are installed.
  when: ansible_os_family == "Debian"  # Run this task only on Debian-based systems (Ubuntu, etc.)

# Remove old Terraform binary if it exists.
- name: Remove old Terraform binary (if exists)
  ansible.builtin.file:
    path: /usr/local/bin/terraform  # Path where Terraform binary is stored.
    state: absent  # Ensure the binary is deleted.

- name: Verify Terraform unstall
  ansible.builtin.stat:
    path: /usr/local/bin/terraform
  register: file_status

- name: Show message if terraform is removed
  ansible.builtin.debug:
    msg: "Terraform is removed"
  when: not file_status.stat.exists

# Fetch the latest Terraform version number using HashiCorp's checkpoint API.
- name: Get the latest Terraform version number
  ansible.builtin.uri:
    url: "https://checkpoint-api.hashicorp.com/v1/check/terraform"  # API URL for Terraform version check.
    return_content: true  # Return the API response content.
  register: terraform_version_api  # Store the API response in terraform_version_api variable.

# Set the latest Terraform version as a fact (a reusable variable).
- name: Set latest Terraform version
  ansible.builtin.set_fact:
    terraform_latest_version: "{{ terraform_version_api.json.current_version }}"  # Set the latest version from API response.

- name: Output the latest version
  ansible.builtin.debug:
    msg: "the latest version of ansible is {{ erraform_version_api.json.current_version }}  "

# Download the latest Terraform binary zip file using the latest version number.
- name: Download Terraform binary
  ansible.builtin.get_url:
    url: >
      https://releases.hashicorp.com/terraform/{{ terraform_latest_version }}/terraform_{{ terraform_latest_version }}_linux_amd64.zip
    dest: "/tmp/terraform.zip"  # Destination to save the zip file.
    mode: '0644'

# Unzip the downloaded Terraform binary into /usr/local/bin directory.
- name: Unzip Terraform binary
  ansible.builtin.unarchive:
    src: "/tmp/terraform.zip"  # The path to the zip file.
    dest: "/usr/local/bin"  # Directory where the Terraform binary will be placed.
    remote_src: true  # The zip file is already on the target system (remote), not on the Ansible controller.

# Ensure the Terraform binary has the correct permissions to be executable.
- name: Ensure Terraform binary is executable
  ansible.builtin.file:
    path: "/usr/local/bin/terraform"  # Path to the Terraform binary.
    mode: '0755'  # Set permissions to allow execution.
    state: file  # Ensure it's a file and not absent or a directory.

# Run Terraform to check if the installation was successful and get the installed version.
- name: Verify Terraform installation
  ansible.builtin.command: terraform --version  # Command to check the installed version of Terraform.
  register: terraform_version_output  # Store the command output in terraform_version_output variable.
  changed_when: false  # Do not mark this task as changed since it's just a check.

# Output the installed Terraform version to verify the installation.

- name: Show Terraform version
  ansible.builtin.debug:
    msg: "{{ terraform_version_output.stdout }}"  # Print the version output from the previous task.

# - name: show all system facts
#   ansible.builtin.debug:
#     var: ansible_facts
# - name: chek if is the system is debian Debian-based
#   ansible.builtin.debug:
#     msg: "this system is debian based"
#   when: ansible_destribution | search("Debian") or ansible_destribution | search("(Ubuntu")

# - name: Check if the OS is either Debian or Ubuntu
#   debug:
#     msg: "This system is either Debian or Ubuntu."
#   when: "'Debian' in ansible_distribution or 'Ubuntu' in ansible_distribution"
